<div id="comment-list">
    {{#commentDtos}}
        <div class="card m-2" id="comments-{{id}}">
            <div class="card-header">
                {{nickname}}
<!-- 수정 버튼 -->
                <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#comment-edit-modal" data-bs-id="{{id}}" data-bs-nickname="{{nickname}}" data-bs-body="{{body}}" data-bs-article-id="{{articleId}}">수정</button>
<!-- 삭제 버튼 -->
                <button type="button" class="btn btn-sm btn-outline-danger comment-delete-btn" data-comment-id="{{id}}">삭제</button>
            </div>
            <div class="card-body">
                {{body}}
            </div>
        </div>
    {{/commentDtos}}

</div>

<!-- Modal창 만들기 -->
<div class="modal fade" tabindex="-1" id="comment-edit-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
<!-- 댓글 수정폼 추가 -->
                <form>
<!-- 닉네임 수정 -->
                    <div class="mb-3">
                        <div class="form-label">닉네임</div>
                        <input type="text" class="form-control-sm" id="edit-comment-nickname">
                    </div>
<!-- 댓글 본문 -->
                    <div class="mb-3">
                        <div class="form-label">댓글 내용</div>
                        <textarea class="form-control-sm" id="edit-comment-body" rows="3"></textarea>
                    </div>
                    <!-- 히든 값 가져오기 -->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">
                    <!-- 전송버튼 -->
                    <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal 이벤트 처리 -->

<script>
{
    const commentEditModal = document.getElementById('comment-edit-modal');
    if(commentEditModal) {
      commentEditModal.addEventListener('show.bs.modal', event => {
        // 트리거 버튼 선택
        const triggerBtn = event.relatedTarget

        // 데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-article-id");

        // console.log(`${id},${nickname},${body},${articleId}`);

        // 가져온 데이터 Modal에 반영
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;
        document.querySelector("#edit-comment-article-id").value = articleId;

      });
    }
}

{

// CommentApiController에서 @fetchMapping으로 수정

    // 댓글 수정 버튼 변수화
    const commentUpdateBtn = document.querySelector("#comment-update-btn");
    commentUpdateBtn.addEventListener("click",function(){
        // 수정 댓글 객체 생성
        const comment ={
        id: document.querySelector("#edit-comment-id").value,
        nickname: document.querySelector("#edit-comment-nickname").value,
        body: document.querySelector("#edit-comment-body").value,
        article_id: document.querySelector("#edit-comment-article-id").value
        }

        // fetch() - 비동기 통신을 위한 API
        const url = "/api/comments/"+comment.id;
        fetch(url,{
            method:"PATCH",
            body:JSON.stringify(comment),  // stringify : 제이슨 파일로 바꾸기
            headers:{
            "Content-Type":"application/json"
            }
        }).then(response => {
            // 제대로 전송이 되었을때 http 응답 코드에 따른 메시지 출력
            const msg = (response.ok) ? "댓글수정성공" : "댓글수정실패..!";
            alert(msg);

            // 현재페이지 새로 고침
            window.location.reload();
        });
    });

}
</script>


<!-- 댓글 삭제 -->
<script>
{
    // 삭제 버튼 선택
    const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");
    // 삭제 버튼 이벤트를 처리
    commentDeleteBtns.forEach(btn => {
        // 각 버튼의 이벤트 처리를 등록
        btn.addEventListener("click",(event)=>{




        // console.log("삭제버튼이 클릭되었습니다.")
        // 이벤트 발생요소 선택
        const commentDeleteBtn = event.target;

        // 삭제 댓글 id 가져오기
        const commentId = commentDeleteBtn.getAttribute("data-comment-id");
        console.log(`삭제 버튼 클릭 : ${commentId}번 댓글`);

        // Delete() - 비동기 통신을 위한 API
        const url = `/api/comments/${commentId}`;
        fetch(url,{
            method:"DELETE",
            headers: {
                    "Content-Type": "application/json"
                    }
        }).then(response => {
            // 댓글 삭제 실패처리
            if(!response.ok){
                alert("댓글삭제실패..!");
                return;
            }
            // 삭제 성공 시, 댓글화면에서 지움
            const target = document.querySelector(`#comments-${commentId}`);
            target.remove();
            });
        });
    });


}
</script>